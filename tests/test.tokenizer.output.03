(:open
define:symbol
curry2:symbol
(:open
lambda:symbol
(:open
f:symbol
):close
(:open
lambda:symbol
(:open
x:symbol
):close
(:open
lambda:symbol
(:open
y:symbol
):close
(:open
f:symbol
x:symbol
y:symbol
):close
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
(:open
(:open
curry2:symbol
+:symbol
3:integer
):close
2:integer
):close
5:integer
):close
(:open
define:symbol
uncurry2:symbol
(:open
lambda:symbol
(:open
f:symbol
):close
(:open
lambda:symbol
(:open
x:symbol
y:symbol
):close
(:open
(:open
f:symbol
x:symbol
):close
y:symbol
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
(:open
uncurry2:symbol
(:open
curry2:symbol
+:symbol
):close
3:integer
4:integer
):close
7:integer
):close
(:open
check-equal?:symbol
(:open
(:open
uncurry2:symbol
(:open
curry2:symbol
/:symbol
):close
):close
25:integer
5:integer
):close
5:integer
):close
(:open
define:symbol
mult:symbol
(:open
lambda:symbol
(:open
x:symbol
y:symbol
):close
(:open
(:open
(:open
curry2:symbol
*:symbol
):close
x:symbol
):close
y:symbol
):close
):close
):close
(:open
check-equal?:symbol
(:open
mult:symbol
-2:integer
9:integer
):close
-18:integer
):close
(:open
check-equal?:symbol
(:open
mult:symbol
1:integer
3:integer
):close
3:integer
):close
(:open
define:symbol
compose:symbol
(:open
lambda:symbol
(:open
f:symbol
g:symbol
):close
(:open
lambda:symbol
(:open
x:symbol
):close
(:open
f:symbol
(:open
g:symbol
x:symbol
):close
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
(:open
compose:symbol
+:symbol
-:symbol
3:integer
):close
-3:integer
):close
(:open
check-equal?:symbol
(:open
(:open
compose:symbol
+:symbol
sqrt:symbol
):close
9:integer
):close
3:integer
):close
(:open
define:symbol
negate:symbol
(:open
lambda:symbol
(:open
predicate:symbol
):close
(:open
lambda:symbol
(:open
x:symbol
):close
(:open
if:symbol
(:open
not:symbol
(:open
predicate:symbol
x:symbol
):close
):close
#t:boolean
#f:boolean
):close
):close
):close
):close
(:open
check-equal?:symbol
(:open
even?:symbol
3:integer
):close
#f:boolean
):close
(:open
check-equal?:symbol
(:open
(:open
negate:symbol
even?:symbol
):close
3:integer
):close
#t:boolean
):close
